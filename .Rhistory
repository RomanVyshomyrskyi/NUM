eq <- paste0("y = ", round(a, 2), " + ", round(b, 2), " * x")
legend("topleft", legend = eq, bty = "n", col = "green", lwd = 2)
return(list(intercept = a, slope = b))
}
LSA <- function(x, y, n) {
X <- outer(x, 0:(n-1), "^")
a <- solve(t(X) %*% X, t(X) %*% y)
plot(x, y, main = "Manual Least Squares Fit", xlab = "x", ylab = "y", pch = 19)
y_fit <- a[1] + a[2] * x + a[3] * x**2 + a[4] * x**3  + a[5] * x**4 + a[6]* x**5
lines(x, y_fit, col = "green", lwd = 2)
return(a)
}
LSA(i_val, y_val, 6)
#least_squares_fit(i_val, y_val)
plot(i_val, 1/y_val)
I_analyticke <- log(2)
f <- function(x) {
1 / x
}
midpoint_integral <- function(f, a, b, n) {
h <- (b - a) / n
I <- 0
for (i in 0:(n - 1)) {
xi <- a + i * h + h / 2  # середина підінтервалу
Si <- h * f(xi)
I <- I + Si
}
return(I)
}
i_val <- 0:20
y_val <- numeric(length(i_val))
for (j in seq_along(i_val)) {
i <- i_val[j]
n <- 2^i
I_numericke <- midpoint_integral(f, 1, 2, n)
y_val[j] <- I_numericke - I_analyticke
}
plot(i_val, y_val, type = "b", pch = 19, col = "blue",
xlab = "i", ylab = expression(y(i) == I[N](i) - I[A]))
abline(h = 0, col = "red", lty = 2)
print(y_val)
least_squares_fit <- function(x, y) {
x_mean <- mean(x)
y_mean <- mean(y)
b <- sum((x - x_mean) * (y - y_mean)) / sum((x - x_mean)^2)
a <- y_mean - b * x_mean
y_fit <- a + b * x
plot(x, y, main = "Manual Least Squares Fit", xlab = "x", ylab = "y", pch = 19)
lines(x, y_fit, col = "green", lwd = 2)
eq <- paste0("y = ", round(a, 2), " + ", round(b, 2), " * x")
legend("topleft", legend = eq, bty = "n", col = "green", lwd = 2)
return(list(intercept = a, slope = b))
}
plot(i_val, 1/y_val)
LSA <- function(x, y, n) {
X <- outer(x, 0:(n-1), "^")
a <- solve(t(X) %*% X, t(X) %*% y)
plot(x, y, main = "Manual Least Squares Fit", xlab = "x", ylab = "y", pch = 19)
y_fit <- a[1] + a[2] * x + a[3] * x**2 + a[4] * x**3  + a[5] * x**4 + a[6]* x**5
lines(x, y_fit, col = "green", lwd = 2)
return(a)
}
LSA(i_val, y_val, 6)
#least_squares_fit(i_val, y_val)
I_analyticke <- log(2)
f <- function(x) {
1 / x
}
midpoint_integral <- function(f, a, b, n) {
h <- (b - a) / n
I <- 0
for (i in 0:(n - 1)) {
xi <- a + i * h + h / 2  # середина підінтервалу
Si <- h * f(xi)
I <- I + Si
}
return(I)
}
i_val <- 0:20
y_val <- numeric(length(i_val))
for (j in seq_along(i_val)) {
i <- i_val[j]
n <- 2^i
I_numericke <- midpoint_integral(f, 1, 2, n)
y_val[j] <- I_numericke - I_analyticke
}
plot(i_val, y_val, type = "b", pch = 19, col = "blue",
xlab = "i", ylab = expression(y(i) == I[N](i) - I[A]))
abline(h = 0, col = "red", lty = 2)
print(y_val)
least_squares_fit <- function(x, y) {
x_mean <- mean(x)
y_mean <- mean(y)
b <- sum((x - x_mean) * (y - y_mean)) / sum((x - x_mean)^2)
a <- y_mean - b * x_mean
y_fit <- a + b * x
plot(x, y, main = "Manual Least Squares Fit", xlab = "x", ylab = "y", pch = 19)
lines(x, y_fit, col = "green", lwd = 2)
eq <- paste0("y = ", round(a, 2), " + ", round(b, 2), " * x")
legend("topleft", legend = eq, bty = "n", col = "green", lwd = 2)
return(list(intercept = a, slope = b))
}
plot(i_val, 1/y_val)
LSA <- function(x, y, n=6) {
X <- outer(x, 0:(n-1), "^")
a <- solve(t(X) %*% X, t(X) %*% y)
plot(x, y, main = "Manual Least Squares Fit", xlab = "x", ylab = "y", pch = 19)
y_fit <- a[1] + a[2] * x + a[3] * x**2 + a[4] * x**3  + a[5] * x**4 + a[6]* x**5
lines(x, y_fit, col = "green", lwd = 2)
return(a)
}
LSA(i_val, y_val)
#least_squares_fit(i_val, y_val)
I_analyticke <- log(2)
f <- function(x) {
1 / x
}
midpoint_integral <- function(f, a, b, n) {
h <- (b - a) / n
I <- 0
for (i in 0:(n - 1)) {
xi <- a + i * h + h / 2  # середина підінтервалу
Si <- h * f(xi)
I <- I + Si
}
return(I)
}
i_val <- 0:20
y_val <- numeric(length(i_val))
for (j in seq_along(i_val)) {
i <- i_val[j]
n <- 2^i
I_numericke <- midpoint_integral(f, 1, 2, n)
y_val[j] <- I_numericke - I_analyticke
}
plot(i_val, y_val, type = "b", pch = 19, col = "blue",
xlab = "i", ylab = expression(y(i) == I[N](i) - I[A]))
abline(h = 0, col = "red", lty = 2)
print(y_val)
least_squares_fit <- function(x, y) {
x_mean <- mean(x)
y_mean <- mean(y)
b <- sum((x - x_mean) * (y - y_mean)) / sum((x - x_mean)^2)
a <- y_mean - b * x_mean
y_fit <- a + b * x
plot(x, y, main = "Manual Least Squares Fit", xlab = "x", ylab = "y", pch = 19)
lines(x, y_fit, col = "green", lwd = 2)
eq <- paste0("y = ", round(a, 2), " + ", round(b, 2), " * x")
legend("topleft", legend = eq, bty = "n", col = "green", lwd = 2)
return(list(intercept = a, slope = b))
}
plot(i_val, 1/y_val)
LSA <- function(x, y, n=3) {
X <- outer(x, 0:(n-1), "^")
a <- solve(t(X) %*% X, t(X) %*% y)
plot(x, y, main = "Manual Least Squares Fit", xlab = "x", ylab = "y", pch = 19)
#y_fit <- a[1] + a[2] * x + a[3] * x**2 + a[4] * x**3  + a[5] * x**4 + a[6]* x**5
y_fit  <- a[1] + a[2]*x +a[3]* ln(x)
lines(x, y_fit, col = "green", lwd = 2)
return(a)
}
LSA(i_val, y_val)
I_analyticke <- log(2)
f <- function(x) {
1 / x
}
midpoint_integral <- function(f, a, b, n) {
h <- (b - a) / n
I <- 0
for (i in 0:(n - 1)) {
xi <- a + i * h + h / 2  # середина підінтервалу
Si <- h * f(xi)
I <- I + Si
}
return(I)
}
i_val <- 0:20
y_val <- numeric(length(i_val))
for (j in seq_along(i_val)) {
i <- i_val[j]
n <- 2^i
I_numericke <- midpoint_integral(f, 1, 2, n)
y_val[j] <- I_numericke - I_analyticke
}
plot(i_val, y_val, type = "b", pch = 19, col = "blue",
xlab = "i", ylab = expression(y(i) == I[N](i) - I[A]))
abline(h = 0, col = "red", lty = 2)
print(y_val)
least_squares_fit <- function(x, y) {
x_mean <- mean(x)
y_mean <- mean(y)
b <- sum((x - x_mean) * (y - y_mean)) / sum((x - x_mean)^2)
a <- y_mean - b * x_mean
y_fit <- a + b * x
plot(x, y, main = "Manual Least Squares Fit", xlab = "x", ylab = "y", pch = 19)
lines(x, y_fit, col = "green", lwd = 2)
eq <- paste0("y = ", round(a, 2), " + ", round(b, 2), " * x")
legend("topleft", legend = eq, bty = "n", col = "green", lwd = 2)
return(list(intercept = a, slope = b))
}
plot(i_val, 1/y_val)
LSA <- function(x, y, n=3) {
X <- outer(x, 0:(n-1), "^")
a <- solve(t(X) %*% X, t(X) %*% y)
plot(x, y, main = "Manual Least Squares Fit", xlab = "x", ylab = "y", pch = 19)
#y_fit <- a[1] + a[2] * x + a[3] * x**2 + a[4] * x**3  + a[5] * x**4 + a[6]* x**5
y_fit  <- a[1] + a[2]*x +a[3]* log(x)
lines(x, y_fit, col = "green", lwd = 2)
return(a)
}
LSA(i_val, y_val)
#least_squares_fit(i_val, y_val)
I_analyticke <- log(2)
f <- function(x) {
1 / x
}
midpoint_integral <- function(f, a, b, n) {
h <- (b - a) / n
I <- 0
for (i in 0:(n - 1)) {
xi <- a + i * h + h / 2  # середина підінтервалу
Si <- h * f(xi)
I <- I + Si
}
return(I)
}
i_val <- 0:20
y_val <- numeric(length(i_val))
for (j in seq_along(i_val)) {
i <- i_val[j]
n <- 2^i
I_numericke <- midpoint_integral(f, 1, 2, n)
y_val[j] <- I_numericke - I_analyticke
}
plot(i_val, y_val, type = "b", pch = 19, col = "blue",
xlab = "i", ylab = expression(y(i) == I[N](i) - I[A]))
abline(h = 0, col = "red", lty = 2)
print(y_val)
least_squares_fit <- function(x, y) {
x_mean <- mean(x)
y_mean <- mean(y)
b <- sum((x - x_mean) * (y - y_mean)) / sum((x - x_mean)^2)
a <- y_mean - b * x_mean
y_fit <- a + b * x
plot(x, y, main = "Manual Least Squares Fit", xlab = "x", ylab = "y", pch = 19)
lines(x, y_fit, col = "green", lwd = 2)
eq <- paste0("y = ", round(a, 2), " + ", round(b, 2), " * x")
legend("topleft", legend = eq, bty = "n", col = "green", lwd = 2)
return(list(intercept = a, slope = b))
}
plot(i_val, 1/y_val)
LSA <- function(x, y, n=3) {
X <- outer(x, 0:(n-1), "^")
a <- solve(t(X) %*% X, t(X) %*% y)
plot(x, y, main = "Manual Least Squares Fit", xlab = "x", ylab = "y", pch = 19)
y_fit <- a[1] + a[2] * x + a[3] * x**2 + a[4] * x**3  + a[5] * x**4 + a[6]* x**5
lines(x, y_fit, col = "green", lwd = 2)
return(a)
}
LSA(i_val, y_val)
#least_squares_fit(i_val, y_val)
I_analyticke <- log(2)
f <- function(x) {
1 / x
}
midpoint_integral <- function(f, a, b, n) {
h <- (b - a) / n
I <- 0
for (i in 0:(n - 1)) {
xi <- a + i * h + h / 2  # середина підінтервалу
Si <- h * f(xi)
I <- I + Si
}
return(I)
}
i_val <- 0:20
y_val <- numeric(length(i_val))
for (j in seq_along(i_val)) {
i <- i_val[j]
n <- 2^i
I_numericke <- midpoint_integral(f, 1, 2, n)
y_val[j] <- I_numericke - I_analyticke
}
plot(i_val, y_val, type = "b", pch = 19, col = "blue",
xlab = "i", ylab = expression(y(i) == I[N](i) - I[A]))
abline(h = 0, col = "red", lty = 2)
print(y_val)
least_squares_fit <- function(x, y) {
x_mean <- mean(x)
y_mean <- mean(y)
b <- sum((x - x_mean) * (y - y_mean)) / sum((x - x_mean)^2)
a <- y_mean - b * x_mean
y_fit <- a + b * x
plot(x, y, main = "Manual Least Squares Fit", xlab = "x", ylab = "y", pch = 19)
lines(x, y_fit, col = "green", lwd = 2)
eq <- paste0("y = ", round(a, 2), " + ", round(b, 2), " * x")
legend("topleft", legend = eq, bty = "n", col = "green", lwd = 2)
return(list(intercept = a, slope = b))
}
plot(i_val, 1/y_val)
LSA <- function(x, y, n=6) {
X <- outer(x, 0:(n-1), "^")
a <- solve(t(X) %*% X, t(X) %*% y)
plot(x, y, main = "Manual Least Squares Fit", xlab = "x", ylab = "y", pch = 19)
y_fit <- a[1] + a[2] * x + a[3] * x**2 + a[4] * x**3  + a[5] * x**4 + a[6]* x**5
lines(x, y_fit, col = "green", lwd = 2)
return(a)
}
LSA(i_val, y_val)
#least_squares_fit(i_val, y_val)
I_analyticke <- log(2)
f <- function(x) {
1 / x
}
midpoint_integral <- function(f, a, b, n) {
h <- (b - a) / n
I <- 0
for (i in 0:(n - 1)) {
xi <- a + i * h + h / 2  # середина підінтервалу
Si <- h * f(xi)
I <- I + Si
}
return(I)
}
i_val <- 0:100
y_val <- numeric(length(i_val))
for (j in seq_along(i_val)) {
i <- i_val[j]
n <- 2^i
I_numericke <- midpoint_integral(f, 1, 2, n)
y_val[j] <- I_numericke - I_analyticke
}
I_analyticke <- log(2)
f <- function(x) {
1 / x
}
midpoint_integral <- function(f, a, b, n) {
h <- (b - a) / n
I <- 0
for (i in 0:(n - 1)) {
xi <- a + i * h + h / 2  # середина підінтервалу
Si <- h * f(xi)
I <- I + Si
}
return(I)
}
i_val <- 0:50
y_val <- numeric(length(i_val))
for (j in seq_along(i_val)) {
i <- i_val[j]
n <- 2^i
I_numericke <- midpoint_integral(f, 1, 2, n)
y_val[j] <- I_numericke - I_analyticke
}
I_analyticke <- log(2)
f <- function(x) {
1 / x
}
midpoint_integral <- function(f, a, b, n) {
h <- (b - a) / n
I <- 0
for (i in 0:(n - 1)) {
xi <- a + i * h + h / 2  # середина підінтервалу
Si <- h * f(xi)
I <- I + Si
}
return(I)
}
i_val <- 0:50
y_val <- numeric(length(i_val))
for (j in seq_along(i_val)) {
i <- i_val[j]
n <- 2^i
I_numericke <- midpoint_integral(f, 1, 2, n)
y_val[j] <- I_numericke - I_analyticke
}
I_analyticke <- log(2)
f <- function(x) {
1 / x
}
midpoint_integral <- function(f, a, b, n) {
h <- (b - a) / n
I <- 0
for (i in 0:(n - 1)) {
xi <- a + i * h + h / 2  # середина підінтервалу
Si <- h * f(xi)
I <- I + Si
}
return(I)
}
i_val <- 0:50
y_val <- numeric(length(i_val))
for (j in seq_along(i_val)) {
i <- i_val[j]
n <- 2^i
I_numericke <- midpoint_integral(f, 1, 2, n)
y_val[j] <- I_numericke - I_analyticke
if (j>0){
if (y_val[j]< y_val[j-1]){
print(j)
}
}
}
I_analyticke <- log(2)
f <- function(x) {
1 / x
}
midpoint_integral <- function(f, a, b, n) {
h <- (b - a) / n
I <- 0
for (i in 0:(n - 1)) {
xi <- a + i * h + h / 2  # середина підінтервалу
Si <- h * f(xi)
I <- I + Si
}
return(I)
}
i_val <- 0:50
y_val <- numeric(length(i_val))
for (j in seq_along(i_val)) {
i <- i_val[j]
n <- 2^i
I_numericke <- midpoint_integral(f, 1, 2, n)
y_val[j] <- I_numericke - I_analyticke
if (j>1){
if (y_val[j]< y_val[j-1]){
print(j)
}
}
}
I_analyticke <- log(2)
f <- function(x) {
1 / x
}
midpoint_integral <- function(f, a, b, n) {
h <- (b - a) / n
I <- 0
for (i in 0:(n - 1)) {
xi <- a + i * h + h / 2  # середина підінтервалу
Si <- h * f(xi)
I <- I + Si
}
return(I)
}
i_val <- 0:50
y_val <- numeric(length(i_val))
for (j in seq_along(i_val)) {
i <- i_val[j]
n <- 2^i
I_numericke <- midpoint_integral(f, 1, 2, n)
y_val[j] <- I_numericke - I_analyticke
if (j>1){
if (abs(y_val[j])> abs(y_val[j-1])){
print(j)
}
}
}
print(y_val)
I_analyticke <- log(2)
f <- function(x) {
1 / x
}
midpoint_integral <- function(f, a, b, n) {
h <- (b - a) / n
I <- 0
for (i in 0:(n - 1)) {
xi <- a + i * h + h / 2  # середина підінтервалу
Si <- h * f(xi)
I <- I + Si
}
return(I)
}
i_val <- 0:25
y_val <- numeric(length(i_val))
for (j in seq_along(i_val)) {
i <- i_val[j]
n <- 2^i
I_numericke <- midpoint_integral(f, 1, 2, n)
y_val[j] <- I_numericke - I_analyticke
if (j>1){
if (abs(y_val[j])> abs(y_val[j-1])){
print(j)
}
}
}
plot(i_val, y_val, type = "b", pch = 19, col = "blue",
xlab = "i", ylab = expression(y(i) == I[N](i) - I[A]))
abline(h = 0, col = "red", lty = 2)
print(y_val)
least_squares_fit <- function(x, y) {
x_mean <- mean(x)
y_mean <- mean(y)
b <- sum((x - x_mean) * (y - y_mean)) / sum((x - x_mean)^2)
a <- y_mean - b * x_mean
y_fit <- a + b * x
plot(x, y, main = "Manual Least Squares Fit", xlab = "x", ylab = "y", pch = 19)
lines(x, y_fit, col = "green", lwd = 2)
eq <- paste0("y = ", round(a, 2), " + ", round(b, 2), " * x")
legend("topleft", legend = eq, bty = "n", col = "green", lwd = 2)
return(list(intercept = a, slope = b))
}
plot(i_val, 1/y_val)
LSA <- function(x, y, n=6) {
X <- outer(x, 0:(n-1), "^")
a <- solve(t(X) %*% X, t(X) %*% y)
plot(x, y, main = "Manual Least Squares Fit", xlab = "x", ylab = "y", pch = 19)
y_fit <- a[1] + a[2] * x + a[3] * x**2 + a[4] * x**3  + a[5] * x**4 + a[6]* x**5
lines(x, y_fit, col = "green", lwd = 2)
return(a)
}
LSA(i_val, y_val)
#least_squares_fit(i_val, y_val)
